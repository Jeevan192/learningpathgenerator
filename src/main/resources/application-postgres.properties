# PostgreSQL profile - activate with: --spring.profiles.active=postgres

# Use env vars if provided (good for Docker / production)
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/learningpath}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:lp_user}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:lp_password}
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# HikariCP settings (tune these to your environment)
spring.datasource.hikari.maximum-pool-size=${HIKARI_MAX_POOL:10}
spring.datasource.hikari.minimum-idle=${HIKARI_MIN_IDLE:2}
spring.datasource.hikari.idle-timeout=${HIKARI_IDLE_TIMEOUT_MS:600000}
spring.datasource.hikari.connection-timeout=${HIKARI_CONN_TIMEOUT_MS:30000}
spring.datasource.hikari.max-lifetime=${HIKARI_MAX_LIFETIME_MS:1800000}
spring.datasource.hikari.pool-name=LearningHikariCP

# Optional: connection test query (Postgres usually does not need one)
# spring.datasource.hikari.connection-test-query=SELECT 1

# Server port
server.port=8080